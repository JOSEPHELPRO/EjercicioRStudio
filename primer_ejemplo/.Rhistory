n <- as.integer(readline("Ingrese el número de líneas para la pirámide: "))
# Bucle for para imprimir la pirámide
for (i in 1:n) {
# Imprimir 'i' asteriscos en la línea actual
cat(rep("*", i), "\n")
}
repeat {
n <- as.integer(readline("Ingrese el número de líneas para la pirámide: "))
# Verificar si el número es válido
if (!is.na(n) && n > 0) {
break  # Si es un número válido, salir del bucle
} else {
cat("Por favor, ingrese un número entero positivo válido.\n")
}
}
# Bucle repeat para asegurarse de que el usuario ingrese un número válido
repeat {
# Leer la entrada del usuario
input <- readline("Ingrese el número de líneas para la pirámide: ")
# Intentar convertir la entrada a número entero
n <- suppressWarnings(as.integer(input))
# Verificar si el número es válido
if (!is.na(n) && n > 0) {
break  # Si es un número válido, salir del bucle
} else {
cat("Por favor, ingrese un número entero positivo válido.\n")
}
}
n <- 5
# Bucle para imprimir cada línea
for (i in 1:n) {
# Imprime el número de asteriscos correspondiente a la línea actual
cat(rep("*", i), "\n")
}
es_primo <- function(num) {
if (num <= 1) {
return(FALSE)
}
for (i in 2:(sqrt(num))) {
if (num %% i == 0) {
return(FALSE)
}
}
return(TRUE)
}
# Bucle para imprimir los números primos entre 1 y 100
for (num in 1:100) {
if (es_primo(num)) {
print(num)
}
}
numero <- as.integer(readline(prompt = "Ingresa un número entero: "))
# Inicializar la variable para almacenar la suma de los dígitos
suma_digitos <- 0
# Bucle while para sumar los dígitos del número
while (numero > 0) {
# Obtener el último dígito usando el operador de módulo
digito <- numero %% 10
# Agregar el dígito a la suma
suma_digitos <- suma_digitos + digito
# Eliminar el último dígito dividiendo por 10
numero <- numero %/% 10
}
numero <- as.integer(entrada)
numero <- as.integer(entrada)
numero <- as.integer(readline(prompt = "Ingresa un número entero: "))
# Verificar si el número ingresado es válido (no NA)
if (is.na(numero)) {
cat("Por favor, ingresa un número entero válido.\n")
} else {
# Inicializar la variable para almacenar la suma de los dígitos
suma_digitos <- 0
# Bucle while para sumar los dígitos del número
while (numero > 0) {
# Obtener el último dígito usando el operador de módulo
digito <- numero %% 10
# Agregar el dígito a la suma
suma_digitos <- suma_digitos + digito
# Eliminar el último dígito dividiendo por 10
numero <- numero %/% 10
}
# Mostrar la suma de los dígitos
cat("La suma de los dígitos es:", suma_digitos, "\n")
}
123
numero <- as.integer(readline(prompt = "Ingresa un número entero: "))
# Verificar si el número ingresado es válido (no NA)
} else {
numero <- as.integer(readline(prompt = "Ingresa un número entero: "))
# Verificar si el número ingresado es válido (no NA)
if (is.na(numero)) {
cat("Por favor, ingresa un número entero válido.\n")
} else {
# Inicializar la variable para almacenar la suma de los dígitos
suma_digitos <- 0
# Bucle while para sumar los dígitos del número
while (numero > 0) {
# Obtener el último dígito usando el operador de módulo
digito <- numero %% 10
# Agregar el dígito a la suma
suma_digitos <- suma_digitos + digito
# Eliminar el último dígito dividiendo por 10
numero <- numero %/% 10
}
# Mostrar la suma de los dígitos
cat("La suma de los dígitos es:", suma_digitos, "\n")
}
# Solicitar al usuario que ingrese un número entero
numero <- as.integer(readline(prompt = "Ingresa un número entero: "))
# Inicializar la variable para almacenar la suma de los dígitos
suma_digitos <- 0
# Bucle while para sumar los dígitos del número
while (numero > 0) {
# Obtener el último dígito usando el operador de módulo
digito <- numero %% 10
# Agregar el dígito a la suma
suma_digitos <- suma_digitos + digito
# Eliminar el último dígito dividiendo por 10
numero <- numero %/% 10
}
# Solicitar al usuario que ingrese un número entero
numero <- as.integer(readline(prompt = "Ingresa un número entero: "))
# Inicializar la variable para almacenar la suma de los dígitos
suma_digitos <- 0
# Bucle while para sumar los dígitos del número
while (numero > 0) {
# Obtener el último dígito usando el operador de módulo
digito <- numero %% 10
# Agregar el dígito a la suma
suma_digitos <- suma_digitos + digito
# Eliminar el último dígito dividiendo por 10
numero <- numero %/% 10
}
# Solicitar al usuario que ingrese un número entero
numero <- as.integer(readline(prompt = "Ingresa un número entero: "))
# Inicializar la variable para almacenar la suma de los dígitos
suma_digitos <- 0
# Bucle while para sumar los dígitos del número
while (numero > 0) {
# Obtener el último dígito usando el operador de módulo
digito <- numero %% 10
# Agregar el dígito a la suma
suma_digitos <- suma_digitos + digito
# Eliminar el último dígito dividiendo por 10
numero <- numero %/% 10
}
numero <- as.numeric(readline(prompt = "Ingresa un número entero: "))
# Inicializar la variable para almacenar la suma de los dígitos
suma_digitos <- 0
# Bucle while para sumar los dígitos del número
while (numero > 0) {
# Obtener el último dígito usando el operador de módulo
digito <- numero %% 10
# Agregar el dígito a la suma
suma_digitos <- suma_digitos + digito
# Eliminar el último dígito dividiendo por 10
numero <- numero %/% 10
}
suma_digitos_numero <- function() {
# Solicitar al usuario que ingrese un número
numero <- as.numeric(readline("Ingresa un número entero: "))
# Inicializar la variable para almacenar la suma de los dígitos
suma_digitos <- 0
# Convertir el número a valor absoluto por si es negativo
numero <- abs(numero)
# Bucle while para sumar los dígitos del número
while (numero > 0) {
# Obtener el último dígito usando el operador de módulo
digito <- numero %% 10
# Agregar el dígito a la suma
suma_digitos <- suma_digitos + digito
# Eliminar el último dígito dividiendo por 10
numero <- numero %/% 10
}
# Mostrar la suma de los dígitos
print(paste("La suma de los dígitos es:", suma_digitos))
}
# Llamar a la función
suma_digitos_numero()
numero <- as.numeric(readline("Ingresa un número entero: "))
# Inicializar la variable para almacenar la suma de los dígitos
suma_digitos <- 0
# Convertir el número a valor absoluto por si es negativo
numero <- abs(numero)
# Bucle while para sumar los dígitos del número
while (numero > 0) {
# Obtener el último dígito usando el operador de módulo
digito <- numero %% 10
# Agregar el dígito a la suma
suma_digitos <- suma_digitos + digito
# Eliminar el último dígito dividiendo por 10
numero <- numero %/% 10
}
n <- 5
for (i in 1:n) {
cat(rep("*", i), "\n")
}
a <- 0
b <- 1
contador <- 2
cat(a, b, "")
while (contador < 20) {
siguiente <- a + b
cat(siguiente, "")
a <- b
b <- siguiente
contador <- contador + 1
}
N <- as.integer(readline(prompt = "Ingresa un número N: "))
# Inicializar la variable suma
suma <- 0
# Bucle para sumar los números del 1 al N
for (i in 1:N) {
suma <- suma + i
}
N <- as.integer(readline(prompt = "Ingresa un número N: "))
# Inicializar la variable suma
suma <- 0
# Bucle para sumar los números del 1 al N
for (i in 1:N) {
suma <- suma + i
}
N <- as.integer(scan(what = integer(), nmax = 1, quiet = TRUE))
# Inicializar la variable suma
suma <- 0
# Bucle para sumar los números del 1 al N
for (i in 1:N) {
suma <- suma + i
}
# Pedir al usuario que ingrese un número
N <- as.integer(readline(prompt = "Ingresa un número N: "))
# Verificar que el input sea un número válido
if (is.na(N)) {
cat("Por favor, ingresa un número válido.\n")
} else {
# Inicializar la variable suma
suma <- 0
# Bucle para sumar los números del 1 al N
for (i in 1:N) {
suma <- suma + i
}
# Imprimir el resultado
cat("La suma de los primeros", N, "números es:", suma, "\n")
}
N <- 10  # Aquí puedes cambiar 10 por cualquier número que desees
# Inicializar la variable suma
suma <- 0
# Bucle para sumar los números del 1 al N
for (i in 1:N) {
suma <- suma + i
}
# Imprimir el resultado
cat("La suma de los primeros", N, "números es:", suma, "\n")
N <- as.integer(readline(prompt = "Ingresa un número N: "))
if (is.na(N) || N <= 0) {
cat("Por favor ingresa un número válido mayor que 0.\n")
} else {
suma <- 0
for (i in 1:N) {
suma <- suma + i
}
cat("La suma de los primeros", N, "números es:", suma, "\n")
}
8
repeat {
N <- as.integer(readline(prompt = "Ingresa un número N: "))
if (!is.na(N) && N > 0) {
break  # Salir del bucle si N es válido
} else {
cat("Por favor, ingresa un número válido mayor que 0.\n")
}
}
repeat {
N <- as.integer(readline(prompt = "Ingresa un número N: "))
if (!is.na(N) && N > 0) {
break  # Salir del bucle si N es válido
} else {
cat("Por favor, ingresa un número válido mayor que 0.\n")
}
}
repeat {
cat("Ingresa un número N: ")
N <- scan(what = integer(), nmax = 1, quiet = TRUE)
if (!is.na(N) && N > 0) {
break  # Salir del bucle si N es válido
} else {
cat("Por favor, ingresa un número válido mayor que 0.\n")
}
}
repeat {
cat("Ingresa un número N: ")
N <- scan(what = integer(), nmax = 1, quiet = TRUE)
# Verificar si se ha introducido un valor correcto
if (length(N) == 1 && !is.na(N) && N > 0) {
break  # Salir del bucle si N es válido
} else {
cat("Por favor, ingresa un número válido mayor que 0.\n")
}
}
5
repeat {
cat("Ingresa un número N: ")
N <- scan(what = integer(), nmax = 1, quiet = TRUE)
# Verificar si se ha introducido un valor correcto
if (length(N) == 1 && !is.na(N) && N > 0) {
break  # Salir del bucle si N es válido
} else {
cat("Por favor, ingresa un número válido mayor que 0.\n")
}
}
repeat {
cat("Ingresa un número N: ")
N <- scan(what = integer(), nmax = 1, quiet = TRUE)
if (length(N) == 1 && !is.na(N) && N > 0) {
break
} else {
cat("Por favor, ingresa un número válido mayor que 0.\n")
}
}
repeat {
cat("Ingresa un número N: ")
N <- scan(what = integer(), nmax = 1, quiet = TRUE)
if (length(N) == 1 && !is.na(N) && N > 0) {
break
} else {
cat("Por favor, ingresa un número válido mayor que 0.\n")
}
}
repeat {
cat("Ingresa un número N: ")
N <- scan(what = integer(), nmax = 1, quiet = TRUE)
# Verificar si se ha introducido un valor correcto
if (length(N) == 1 && !is.na(N) && N > 0) {
break  # Salir del bucle si N es válido
} else {
cat("Por favor, ingresa un número válido mayor que 0.\n")
}
}
print(paste("La suma de los primeros", n, "números es:", suma))
print(paste("La suma de los primeros", n, "números es:", suma))
repeat {
n <- as.numeric(readline("Ingrese un número N: "))
if (!is.na(n) && n > 0 && n == floor(n)) {
break
} else {
cat("El valor ingresado no es un número válido. Intenta de nuevo.\n")
}
}
4
4
4
4
4
4
print(paste("La suma de los primeros", n, "números es:", suma))
repeat {
n <- as.numeric(readline("Ingrese un número N: "))
if (!is.na(n) && n > 0 && n == floor(n)) {
break
} else {
cat("El valor ingresado no es un número válido. Intenta de nuevo.\n")
}
}
repeat {
n <- as.numeric(readline("Ingrese un número N: "))
if (!is.na(n) && n > 0 && n == floor(n)) {
break
} else {
cat("El valor ingresado no es un número válido. Intenta de nuevo.\n")
}
}
repeat {
n <- as.numeric(readline("Ingrese un número N: "))
if (!is.na(n) && n > 0 && n == floor(n)) {
break  # Salir del bucle si el número es válido
} else {
cat("El valor ingresado no es un número válido. Intenta de nuevo.\n")
}
}
6
6
6
6
repeat {
n <- as.numeric(readline("Ingrese un número N: "))
if (!is.na(n) && n > 0 && n == floor(n)) {
break  # Salir del bucle si el número es válido
} else {
cat("El valor ingresado no es un número válido. Intenta de nuevo.\n")
}
}
cat("La suma de los primeros", N, "números es:", suma, "\n")
N <- as.numeric(readline(prompt = "Introduce un número N: "))
suma <- 0
for (i in 1:N) {
suma <- suma + i
}
cat("El factorial de", N, "es:", factorial, "\n")
suma <- NA
N <- as.numeric(readline(prompt = "Introduce un número N: "))
suma <- NA
for (i in 1:N) {
suma <- suma + i
}
es_primo <- function(num) {
if (num <= 1) {
return(FALSE)
}
for (i in 2:(sqrt(num))) {
if (num %% i == 0) {
return(FALSE)
}
}
return(TRUE)
}
for (num in 1:100) {
if (es_primo(num)) {
print(num)
}
}
n <- 5
for (i in 1:n) {
cat(rep("*", i), "\n")
}
numero <- as.integer(readline(prompt = "Introduce un número: "))
while (numero > 0) {
suma_digitos <- suma_digitos + (numero %% 10)
numero <- numero %/% 10
}
for (numero in 2:100) {
es_primo <- TRUE
for (i in 2:(numero - 1)) {
if (numero %% i == 0) {
es_primo <- FALSE
break  # Salir del bucle si encontramos un divisor
}
}
if (es_primo) {
cat(numero, "\n")
}
}
N <- as.numeric(readline(prompt = "Introduce un número N: "))
suma <- 0
for (i in 1:N) {
suma <- suma + i
}
N <- as.numeric(readline(prompt = "Introduce un número N: "))
suma <- 0
for (i in 1:N) {
suma <- suma + i
}
install.packages("svDialogs")
library(svDialogs)
# Pedir número con cuadro de diálogo
N <- as.numeric(dlgInput("Introduce un número N:")$res)
# Verificar si la entrada es un número válido
if (is.na(N)) {
cat("Por favor, introduce un número válido.\n")
} else {
suma <- 0
for (i in 1:N) {
suma <- suma + i
}
cat("La suma de los primeros", N, "números es:", suma, "\n")
}
numero <- as.numeric(dlgInput("Introduce un número:")$res)
# Verificar si la entrada es un número válido
if (is.na(numero)) {
cat("Por favor, introduce un número válido.\n")
} else {
suma_digitos <- 0
# Mientras el número sea mayor que 0, sumamos sus dígitos
while (numero > 0) {
suma_digitos <- suma_digitos + (numero %% 10)  # Obtiene el último dígito
numero <- numero %/% 10  # Elimina el último dígito
}
cat("La suma de los dígitos es:", suma_digitos, "\n")
}
numero <- as.numeric(dlgInput("Introduce un número:")$res)
# Verificar si la entrada es un número válido
if (is.na(numero)) {
cat("Por favor, introduce un número válido.\n")
} else {
suma_digitos <- 0
# Mientras el número sea mayor que 0, sumamos sus dígitos
while (numero > 0) {
suma_digitos <- suma_digitos + (numero %% 10)  # Obtiene el último dígito
numero <- numero %/% 10  # Elimina el último dígito
}
cat("La suma de los dígitos es:", suma_digitos, "\n")
}
numero <- as.numeric(dlgInput("Introduce un número:")$res)
if (is.na(numero)) {
cat("Por favor, introduce un número válido.\n")
} else {
suma_digitos <- 0
while (numero > 0) {
suma_digitos <- suma_digitos + (numero %% 10)
numero <- numero %/% 10
}
cat("La suma de los dígitos es:", suma_digitos, "\n")
}
N <- as.numeric(dlgInput("Introduce un número N:")$res)
if (is.na(N)) {
cat("Por favor, introduce un número válido.\n")
} else {
suma <- 0
for (i in 1:N) {
suma <- suma + i
}
cat("La suma de los primeros", N, "números es:", suma, "\n")
}
